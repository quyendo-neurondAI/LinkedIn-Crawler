from selenium import webdriver
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from time import sleep

from llama_index.core.tools import FunctionTool
from llama_index.core.tools import ToolMetadata

from agent.utils import *
from agent.webdriver import get_driver

chrome_driver = get_driver()

def navigate_to_profile(profile_url: str, driver: webdriver.Chrome = chrome_driver):
    wait = WebDriverWait(driver, 15)
    driver.get(profile_url)
    wait.until(EC.presence_of_element_located((By.ID,'profile-content')))

def message_action(message: str, driver: webdriver.Chrome = chrome_driver):
    wait = WebDriverWait(driver, 15)
    div_body = locate_element(driver, By.CLASS_NAME, 'body')
    body_xpath = get_fullxpath(driver, div_body)

    sleep(1)
    message_btn = locate_element(driver, By.XPATH, body_xpath+'/div[2]/div/div/main/section[1]/div[2]/div[3]/div/div[1]/button')
    wait.until(EC.element_to_be_clickable(message_btn))
    message_btn.click()


    overlay_container = locate_element(driver, By.CLASS_NAME, 'application-outlet__overlay-container')
    overlay_container_xpath = get_fullxpath(driver, overlay_container)

    sleep(1)
    message_form_old = locate_element(driver, By.XPATH, overlay_container_xpath+"/aside[1]/div[2]/div[1]/div[2]/div/form/div[3]/div[1]/div/div[1]")
    if (message_form_old):
        message_form_old.send_keys(message)

    message_form_new = locate_element(driver, By.XPATH, overlay_container_xpath+"/aside[1]/div[2]/div[1]/div[2]/div/form/div[2]/div[1]/div/div[1]")
    if (message_form_new):
        message_form_new.send_keys(message)

    sleep(1)
    send_btn = driver.find_element(By.XPATH, value=overlay_container_xpath+'/aside[1]/div[2]/div[1]/div[2]/div/form/footer/div[2]/div[1]/button')
    wait.until(EC.element_to_be_clickable(send_btn))
    send_btn.click()

    sleep(2)
    close_btn = locate_element(driver, By.XPATH, overlay_container_xpath+'/aside[1]/div[2]/div[1]/header/div[4]/button[3]')
    wait.until(EC.element_to_be_clickable(close_btn))
    close_btn.click()


def send_message( message: str, profile_url: str):
    navigate_to_profile(profile_url)
    sleep(3)
    message_action(message)
    # chrome_driver.quit()


def send_message_multiple(msg_url: dict):
    for url, message in msg_url.items():
        send_message(message,url)
        sleep(1)
    # chrome_driver.quit()

    
def send_message_tool():
    tool = FunctionTool.from_defaults(
        fn = send_message_multiple,
        tool_metadata=ToolMetadata(
            name = "send_linkedin_msg",
            description=(
                f"Used to send a message. Input is generated by an llm"
            )
        )
    )

    return tool
